const Occupation = require("../model/Occupation");
const Tables = require("../model/Tables");
const Accounts = require("../model/Accounts");
const mongoose = require("mongoose")

const { getAll, addRecord, deleteRecord, updateRecord, getRecord } = require('../controller/mainController')


//get all ocupations
async function getAllOccupations(req, res) {
  const result = await getAll("occupation")
  res.status(result[0]).json(result[1]);
}

//get occupation
async function getOccupation(req, res) {
  console.log("go!")
  const result = await getRecord("occupation", req);
  res.status(result[0]).json(result[1]);
}

//delete occupation
async function deleteOccupation(req, res) {
  const result = await deleteRecord("occupation", req);
  res.status(result[0]).json(result[1]);
}

//update occupation
async function updateOccupation(req, res) {
  const result = await updateRecord("occupation", req);
  res.status(result[0]).json(result[1]);
}





// Return array of all occuptions at the current date and time.
async function getCurrentOccupions(req, res) {
  try {

    // TO DO


  } catch (error) {
    res.status(500).json({ error: "Server error" + error })
  }
}

// Create a new record
async function addOccupation(req, res) {
  console.log("trying to add a occupation..")
  try {

    // Checking for required fields
    if (!req.body.tableID || !req.body.waiterID) {
      return res.status(400).json({ error: "Missing required fields." });
    }

    // Checking if the IDs are valid
    if (!mongoose.Types.ObjectId.isValid(req.body.tableID)) {
      return res.status(404).json({ error: 'tableID - Not a valid ID format.' });
    }

    if (!mongoose.Types.ObjectId.isValid(req.body.waiterID)) {
      return res.status(404).json({ error: 'waiterID - Not a valid ID format.' });
    }

    // Check if ID exists
    const account = await Accounts.findById(req.body.waiterID);
    const table = await Tables.findById(req.body.tableID);

    if (!account) return res.status(404).json({ error: 'This account does not exist' });
    if (account.role != "waiter") return res.status(404).json({ error: 'This account is not of a waiter' });

    if (!table) return res.status(404).json({ error: 'Table does not exist' });

    // Create a new object
    let newOccupation = {
      tableID: req.body.tableID,
      waiterID: req.body.waiterID,
      checkOutTime: null
    };
    // All other fields are autogenerated

    // Find if it exsists is in the DB already
    const occupation = await Occupation.find(newOccupation)

    // If it EXISTS in the DB
    if (occupation.length > 0) return res.status(409).json({ error: "The record is already in the database" })

    // If not create
    Occupation.insertMany(new Occupation(newOccupation))  // add to the db
    res.status(201).json(occupation) // return as a JSON object + HTTP-status code 201 (created).   

  } catch (error) {
    res.status(500).json({ error: "Server error" + error })
  }
}


// Update a record
async function updateOccupation(req, res) {
  try {

    const occupation = await Occupation
      .findByIdAndUpdate(
        req.params.id,
        {
          tableID: req.body.tableID,
          waiterID: req.body.waiterID,
          startTime: req.body.startTime,
          totalPrice: req.body.totalPrice,
          checkOutTime: req.body.checkOutTime
        },
        { new: true });

    // If not found - when var is null -> !var == true
    if (!occupation) return res.status(404).json({ error: 'ID not found' });

    res.status(200).json(occupation)
  } catch (error) {
    res.status(500).json({ error: "Server error" + error })
  }
}


module.exports = { getAllOccupations, addOccupation, updateOccupation, deleteOccupation, getCurrentOccupions, getOccupation };